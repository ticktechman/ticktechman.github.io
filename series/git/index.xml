<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git技术盘点 on Ticktechman&#39;s Blog</title>
    <link>https://ticktechman.tech/series/git/</link>
    <description>Recent content in Git技术盘点 on Ticktechman&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 29 Apr 2024 15:04:56 +0800</lastBuildDate>
    <atom:link href="https://ticktechman.tech/series/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>高效Git-如何快速下载代码</title>
      <link>https://ticktechman.tech/series/git/22/</link>
      <pubDate>Mon, 29 Apr 2024 15:04:56 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/22/</guid>
      <description>快速下载 如果你在大的团队做过项目，一定遇到过这样的问题： 场景1：代码库很大，而你关心的只是其中的一个目录； 场景2：代码库历史沉重，整体仓库很</description>
    </item>
    <item>
      <title>高效git-快速定位问题版本</title>
      <link>https://ticktechman.tech/series/git/21/</link>
      <pubDate>Mon, 29 Apr 2024 14:13:37 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/21/</guid>
      <description>这种事经常发生，但是估计没人想要做这种问题定位，不但没有技术含量，而且无聊。比较有效的方案是： 确定范围，可以参考每日编译的版本和测试结果。如</description>
    </item>
    <item>
      <title>高效Git-命令别名</title>
      <link>https://ticktechman.tech/series/git/20/</link>
      <pubDate>Mon, 29 Apr 2024 11:04:05 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/20/</guid>
      <description>除了自己开发一个扩展命令（高效Git-自定义命令），还可以利用命令别名，就是给已知命令+固定参数创建一个新的别名，你只需要输入很简单的参数，</description>
    </item>
    <item>
      <title>高效Git-自定义命令</title>
      <link>https://ticktechman.tech/series/git/19/</link>
      <pubDate>Mon, 29 Apr 2024 09:27:53 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/19/</guid>
      <description>Git原生提供了丰富的命令，但如果这些命令还是不能满足你的需求，git也提供了扩展命令的途径，你可以使用自己熟悉的任何编程语言来写一个自己的</description>
    </item>
    <item>
      <title>Git使用-典型git工作流</title>
      <link>https://ticktechman.tech/series/git/18/</link>
      <pubDate>Sun, 28 Apr 2024 14:31:54 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/18/</guid>
      <description>下面是一个典型Git工作流，和之前的《Git使用-极简工作流》相比，要复杂一丢丢： 创建本地开发分支：git checkout -b localdev origin/master 功能开发或者bugfix 提</description>
    </item>
    <item>
      <title>Git使用-哪种分支发布策略适合我</title>
      <link>https://ticktechman.tech/series/git/17/</link>
      <pubDate>Fri, 26 Apr 2024 20:33:28 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/17/</guid>
      <description>个人开发者 对于个人开发者或者这个仓库只有你一个人在用，分支策略可以非常简单，一个主干开发分支，用于日常代码提交，需要发布版本的时候，建立一个</description>
    </item>
    <item>
      <title>Git使用-如何证明你的修改是你的</title>
      <link>https://ticktechman.tech/series/git/16/</link>
      <pubDate>Thu, 25 Apr 2024 10:37:37 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/16/</guid>
      <description>在Git中，用户名和邮箱是可以随意配置的，如果有人冒充你的邮箱和用户名，Git是不会做限制的，那如何证明这个修改是你做的？这就用到了数字签名</description>
    </item>
    <item>
      <title>Git使用-如何做代码合并</title>
      <link>https://ticktechman.tech/series/git/15/</link>
      <pubDate>Tue, 23 Apr 2024 14:26:08 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/15/</guid>
      <description>区别：merge和rebase Git提供了两种代码合并方式，merge和rebase，我们先看看这两种方式有什么区别？ 代码合并前的状态 top</description>
    </item>
    <item>
      <title>Git常见问题-如何修改最后一次的提交信息</title>
      <link>https://ticktechman.tech/series/git/14/</link>
      <pubDate>Mon, 22 Apr 2024 10:26:46 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/14/</guid>
      <description>修改 在执行git commit操作的时候，偶尔会出现描述信息填写的不对或者根本没写的情况，这种情况不但在新手中会出现，就算使用了很多年的git</description>
    </item>
    <item>
      <title>Git常见问题-如何查看远端仓库的信息</title>
      <link>https://ticktechman.tech/series/git/13/</link>
      <pubDate>Mon, 22 Apr 2024 10:02:42 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/13/</guid>
      <description>在使用了一段时间后，可能不记得远端仓库的地址了，要怎么查看？当然除了这个，可能还想看看远端仓库的其他信息，例如有哪些分支或者标签，下面的命令</description>
    </item>
    <item>
      <title>Git常见问题-如何创建一个远端分支或者标签</title>
      <link>https://ticktechman.tech/series/git/12/</link>
      <pubDate>Mon, 22 Apr 2024 09:38:34 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/12/</guid>
      <description>创建 在日常使用中，远端分支一般用来团队共同开发一个新特性，远端标签一般用来发布版本使用，那如何在远端仓库建立一个分支和标签呢？使用下面的命令</description>
    </item>
    <item>
      <title>Git常见问题-如何回退远端库的代码</title>
      <link>https://ticktechman.tech/series/git/11/</link>
      <pubDate>Sun, 21 Apr 2024 16:21:10 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/11/</guid>
      <description>错误的代码被提交到代码库上，这种情况并不少见。只要能够尽快发现，就不会造成太大问题。今天我们就来看看，如何将远端库上的代码会退到上一个版本。</description>
    </item>
    <item>
      <title>Git常见问题-如何解决冲突</title>
      <link>https://ticktechman.tech/series/git/10/</link>
      <pubDate>Sun, 21 Apr 2024 10:57:09 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/10/</guid>
      <description>场景 在Git操作中，冲突一般出现在执行git merge或者git rebase操作后，出现冲突的原因一般是两个人修改了同一文件的同一区域，Gi</description>
    </item>
    <item>
      <title>Git常见问题-推送出错了怎么办？</title>
      <link>https://ticktechman.tech/series/git/09/</link>
      <pubDate>Sun, 21 Apr 2024 10:00:39 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/09/</guid>
      <description>原因 在push失败的时候，你通常看到的情况是这样的： bash 1 2 3 4 5 6 7 8 9 git push To /Users/ticktech/usr/playground/git/demo.git ! [rejected] master -&amp;gt; master (fetch first) error: failed to push some refs to &amp;#39;/Users/ticktech/usr/playground/git/demo.git&amp;#39; hint: Updates were rejected because the remote contains work that you do not hint: have</description>
    </item>
    <item>
      <title>Git常见问题-提交了一个垃圾文件怎么办</title>
      <link>https://ticktechman.tech/series/git/08/</link>
      <pubDate>Sun, 21 Apr 2024 09:16:01 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/08/</guid>
      <description>场景 在日常操作中，错误的提交了一个本不属于代码库的文件或目录，几乎每个人都犯过。想要删掉这些文件或目录，可以有以下几种选择： 只删除文件，但不</description>
    </item>
    <item>
      <title>Git常见问题-如何放弃本地修改</title>
      <link>https://ticktechman.tech/series/git/07/</link>
      <pubDate>Sat, 20 Apr 2024 15:53:48 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/07/</guid>
      <description>当我们在说放弃本地修改的时候，我们是在说如下几种场景： 只在工作区中做了修改 如果需要全部撤销：git reset --hard HEAD 如果只撤销个别文件：git checkout &amp;lt;file1&amp;gt; 在工作</description>
    </item>
    <item>
      <title>Git使用-极简工作流</title>
      <link>https://ticktechman.tech/series/git/06/</link>
      <pubDate>Sat, 20 Apr 2024 12:51:48 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/06/</guid>
      <description>工作流 这是一个Git极简工作流，对于刚刚上手Git的小伙伴很实用。 下载代码（clone）：git clone &amp;lt;your-repo-url&amp;gt; 创建分支（branch）：git checkout -b dev 修</description>
    </item>
    <item>
      <title>Git基本概念-其它</title>
      <link>https://ticktechman.tech/series/git/05/</link>
      <pubDate>Fri, 19 Apr 2024 16:58:07 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/05/</guid>
      <description>分支(Branch)&amp;amp;标签(Tag) 分支：分支代表了一个独立的开发线路，支持动态演进。当你创建了一个分支，你可以在上面提交代码、创建</description>
    </item>
    <item>
      <title>Git基本概念-仓库、暂存区、工作区</title>
      <link>https://ticktechman.tech/series/git/04/</link>
      <pubDate>Fri, 19 Apr 2024 12:08:21 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/04/</guid>
      <description>概念解释 仓库：顾名思义，就是存储数据的地方，Git仓库中存储着用户数据（代码，文本等），历史记录、提交信息、分支/标签信息等，对应.git目</description>
    </item>
    <item>
      <title>Git使用-极简配置</title>
      <link>https://ticktechman.tech/series/git/03/</link>
      <pubDate>Fri, 19 Apr 2024 09:16:42 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/03/</guid>
      <description>配置级别 首先我们介绍一下Git配置的级别，以及各个级别之间的关系。下图是Git配置的级别： 上图中可以看到4个级别的配置，影响的范围也逐渐增加</description>
    </item>
    <item>
      <title>Git软件安装</title>
      <link>https://ticktechman.tech/series/git/02/</link>
      <pubDate>Thu, 18 Apr 2024 18:53:22 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/02/</guid>
      <description>安装Git Git支持全平台，包括Windows、Linux、macOS系统，下面我们以三个平台为例，介绍如何安装Git： 1. Windows 下载安装包，双击</description>
    </item>
    <item>
      <title>Git简史</title>
      <link>https://ticktechman.tech/series/git/01/</link>
      <pubDate>Thu, 18 Apr 2024 16:06:45 +0800</pubDate>
      <guid>https://ticktechman.tech/series/git/01/</guid>
      <description>本文简单介绍一下git的历史，看看这个众多程序员都在用的工具，是如何诞生的。 人物： Linus Torvalds Andrew Tridgell Larry McVoy Junio Hamano 时间线： 时间回到2002年，当时Linus</description>
    </item>
  </channel>
</rss>
